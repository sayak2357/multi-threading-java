ðŸŸ¡ LEVEL 2 â€” SYNCHRONIZATION & DATA SAFETY

Learn to prevent race conditions and coordinate shared data safely.


ðŸ§© Q7 â€“ Race Condition Demo

Goal: Observe unsynchronized access.
Requirements:

Shared Counter with count++.

10 threads increment it 1000 times.

Print wrong result (less than 10000).

Fix it with synchronized.

Hint: Use synchronized void increment().

ðŸ§© Q8 â€“ Synchronized Method vs Block

Goal: Compare synchronization scopes.
Requirements:

Same counter example.

Version 1: whole method synchronized.

Version 2: only critical section.

Compare performance.

ðŸ§© Q9 â€“ Static Synchronization

Goal: Understand class-level locking.
Requirements:

Create two objects of same class with a static synchronized method.

Show that they share one class-level lock.

ðŸ§© Q10 â€“ Deadlock

Goal: Simulate deadlock and fix it.
Requirements:

Two threads lock resources A and B in reverse order.

Program freezes â†’ deadlock.

Fix using consistent lock ordering.

Hint: Always acquire locks in same order.

ðŸ§© Q11 â€“ Using ReentrantLock

Goal: Learn explicit locking.
Requirements:

Replace synchronized with ReentrantLock.

Demonstrate tryLock() and unlock() usage.

ðŸ§© Q12 â€“ Thread-Safe Collections

Goal: Understand safe collections.
Requirements:

Run multiple threads adding to:

ArrayList (fail)

Collections.synchronizedList() (works)

Observe difference.